/******************************************************************************* * Copyright (c) 2018 Yodlee Inc. All Rights Reserved. *  * This software is the confidential and proprietary information of * Yodlee, Inc. Use is subject to license terms. *  * @author Ashwin PM ******************************************************************************/package com.omni.pfm.utility;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.List;import com.omni.pfm.testBase.TestBase;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class FinAppUtil extends TestBase {		Logger logger=LoggerFactory.getLogger(FinAppUtil.class);	public WebDriver d=null;		public FinAppUtil(WebDriver d) {		this.d=d;	}				  /**		 * Utility method to get Account Name WebElement by passing Account Name as params.		 * 		 * @param accountName		 * 			Account Name as shown in Accounts FinApp.		 * @return 		 * 			Account name WebElement		 */	    	    public WebElement institutionViewGetAccountName(String accountName) {	    		    	String baseAccNameXpath,accNameXpath = "";	    	WebElement accNumber = null;	    		    	baseAccNameXpath = "//span[ contains(text(),'accountName') ]";	    		    	accNameXpath = baseAccNameXpath.replace("accountName", accountName);	    		    	accNumber = d.findElement(By.xpath(accNameXpath));	    				    	return accNumber;	    		    }					/**	 * Utility method to generate a future date in MM/DD/YY format, by passing the number of days to add as argument. Can be used for filling due dates.	 * 	 * @param numberOfDaysToAdd	 *            (int) Number of days to be added to the current date.	 * 	 */    public String getFutureDate(int numberOfDaysToAdd) {		Calendar c = Calendar.getInstance();		c.add(Calendar.DATE, numberOfDaysToAdd);		System.out.println(new SimpleDateFormat("MM/dd/yyyy").format(c.getTime()));		return new SimpleDateFormat("MM/dd/yyyy").format(c.getTime());	}                /**	 * Utility method to open Account Settings pop up from Accounts FinApp by passing Account Name & Container Name as params..	 * 	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 * 	 * 	 */        public void intitutionViewClickOnAccountSettings(String accountName, String containerName) {    	String baseMoreBtnXpath,baseAccSettingsBtnXpath,moreBtnXpath,accSettingsBtnXpath = "";    	WebElement moreBtn,accSettingsBtn = null;    	baseMoreBtnXpath = " ";    	baseAccSettingsBtnXpath = "//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-low']//a[@autoid='accounts_more_values' and contains(text(),'Accounts Settings')]";    	moreBtnXpath = baseMoreBtnXpath.replace("accountName", accountName);    	moreBtnXpath = moreBtnXpath.replace("containerName", containerName);    	accSettingsBtnXpath = baseAccSettingsBtnXpath.replace("accountName", accountName);    	accSettingsBtnXpath = accSettingsBtnXpath.replace("containerName", containerName);		SeleniumUtil.scrollElementIntoView(d,d.findElement(By.xpath(accSettingsBtnXpath)), true);  // added extra        accSettingsBtn = d.findElement(By.xpath(accSettingsBtnXpath));//    	SeleniumUtil.click(By.xpath(moreBtnXpath));    	SeleniumUtil.waitForPageToLoad();    	SeleniumUtil.click(accSettingsBtn);    	SeleniumUtil.waitForPageToLoad();    }                        /**	 * Utility method to open Account Settings pop up from Accounts FinApp by passing Account Name & Container Name as params..	 * 	 * @author ashwin pm	 * 	 * @param accountType	 *            Account Type name as displayed below container name, in Account type view.	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 */        public void accountTypeViewClickOnAccountSettings(String accountType, String accountName) {    	    	String baseMoreBtnXpath,baseAccSettingsBtnXpath,moreBtnXpath,accSettingsBtnXpath = "";    	WebElement moreBtn,accSettingsBtn = null;    	    	baseMoreBtnXpath = "//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-medium' and contains(.//span,'accountType')]//a[@autoid='accounts_btn_More']";    	baseAccSettingsBtnXpath = "//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-medium' and contains(.//span,'accountType')]//a[@autoid='accounts_more_values' and contains(text(),'Accounts Settings')]";        	moreBtnXpath = baseMoreBtnXpath.replace("accountName", accountName);    	moreBtnXpath = moreBtnXpath.replace("accountType", accountType);    	    	accSettingsBtnXpath = baseAccSettingsBtnXpath.replace("accountName", accountName);    	accSettingsBtnXpath = accSettingsBtnXpath.replace("accountType", accountType);    	    	moreBtn = d.findElement(By.xpath(moreBtnXpath));    	accSettingsBtn = d.findElement(By.xpath(accSettingsBtnXpath));    			    	SeleniumUtil.click(moreBtn);    	SeleniumUtil.waitForPageToLoad();    	    	SeleniumUtil.click(accSettingsBtn);    	SeleniumUtil.waitForPageToLoad();    	    }                        /**	 * Utility method to get account balance by passing Account Name as param.	 * 	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 * @return 	 * 				Account balance WebElement	 */        public WebElement institutionViewGetAccountBalance(String accountName) {    	    	String baseAccBalanceXpath,accBalanceXpath = "";    	WebElement accBalance = null;    	    	baseAccBalanceXpath = "//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-low']//span[@autoid='accounts_lbl_AccAmt']";    	    	accBalanceXpath = baseAccBalanceXpath.replace("accountName", accountName);    	    	SeleniumUtil.waitForPageToLoad();    	    	accBalance = d.findElement(By.xpath(accBalanceXpath));    			    	return accBalance;    	    }                        /**	 * Utility method to get account balance by passing Account Name & Account Type as params..	 * 	 * @param accountType	 *            Account Type name as displayed below container name, in Account type view.	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 * @return 	 * 				Account Balance in String	 */        public String accountTypeViewGetAccountBalance(String accountType, String accountName) {    	    	String baseAccBalanceXpath,accBalanceXpath = "";    	WebElement accBalance = null;    	    	baseAccBalanceXpath = "//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-medium' and contains(.//span,'accountType')]//span[@autoid='account-type-num']";    	    	accBalanceXpath = baseAccBalanceXpath.replace("accountName", accountName);    	accBalanceXpath = accBalanceXpath.replace("accountType", accountType);    	    	accBalance = d.findElement(By.xpath(accBalanceXpath));    			    	return accBalance.getText().trim();    	    }                        /**	 * Utility method to get Account Type & Number by passing Account Name	 *	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 * @return 	 * 				Account Type-Number WebElement	 */        public WebElement institutionViewGetAccountNumber(String accountName) {    	    	String baseAccNumberXpath,accNumberXpath,baseAccNumberXpathMobile,accNumberXpathMobile = "";    	WebElement accNumber = null;    	    	if(appFlag.equals("app") || appFlag.equals("emulator")) {    		baseAccNumberXpathMobile ="//div[ contains(.//span,'accountName')]/ancestor::div[@autoid='accounts-container-level-low']//*[contains(@class,'y-secondary-text hide-for-medium-up')]//*[@class='ellipsis']";    		accNumberXpathMobile = baseAccNumberXpathMobile.replace("accountName", accountName);    		SeleniumUtil.waitForPageToLoad();        	accNumber = d.findElement(By.xpath(accNumberXpathMobile));    	} else {    		baseAccNumberXpath = "//div[ contains(.//span,'accountName')]/ancestor::div[@autoid='accounts-container-level-low']//span[@autoid='account-type-num']";        	accNumberXpath = baseAccNumberXpath.replace("accountName", accountName);        	SeleniumUtil.waitForPageToLoad();        	accNumber = d.findElement(By.xpath(accNumberXpath));    	}    	//baseAccNumberXpath = "//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-medium' and contains(.//span,'containerName')]//span[@autoid='account-type-num']";    	System.out.println(accNumber.getText());		    	return accNumber;    }         /**	 * Utility method to get Account Type & Number by passing Account Name & Container Name as params..	 * 	 * @param accountType	 *            Account Type name as displayed below container name, in Account type view.	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 * @return 	 * 				Account Type-Number in String	 */        public String accountTypeViewGetAccountNumber(String accountName,String accountType) {    	    	String baseAccNumberXpath,accNumberXpath = "";    	WebElement accNumber = null;    	    	baseAccNumberXpath = "//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-medium' and contains(.//span,'accountType')]//span[@autoid='account-type-num']";    	    	accNumberXpath = baseAccNumberXpath.replace("accountName", accountName);    	accNumberXpath = accNumberXpath.replace("containerName", accountType);    	    	accNumber = d.findElement(By.xpath(accNumberXpath));    			    	return accNumber.getText().trim();    	    }        /**	 * Utility method to verify if account is displayed under a particular container by passing Account Name & Container Name as params..	 * 	 * @param accountType	 *            Account Type name as displayed below container name, in Account type view.	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 * @return 	 * 			(Boolean) True/False	 */        public Boolean institutionViewVerifyAccountIsPresentUnderContainer(String accountName,String accountType) {    	    	String baseAccNameXpath,accNameXpath = "";    	Boolean isPresent = true;    	    	baseAccNameXpath = "//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-medium' and contains(.//span,'accountType')]";    	    	accNameXpath = baseAccNameXpath.replace("accountName", accountName);    	accNameXpath = accNameXpath.replace("accountType", accountType);    	    	SeleniumUtil.waitForPageToLoad();    	    	try {			if (d.findElement(By.xpath(accNameXpath)).isDisplayed()) {											}		} catch (Exception e) {			isPresent = false;		}    			    	return isPresent;    	    }            /**	 * Utility method to get Total Account Balance for container by passing Account Name & Container Name as params..	 * 	 * @param accountName	 *            Any one account name that belongs to the particular container.	 * @param containerName	 *            Account name as shown in Accounts FinApp.	 * 	 */        public WebElement institutionViewGetContainerLevelBalance(String accountName,String containerName) {    	    	String xpath1 = "";		String xpath2 = "";		WebElement we = null;				xpath1 = "//div[ contains(.//span,'changeAccountName') ]/ancestor::div[@id='account-container-view' and contains(.//span,'changeContainerName')]//span[@autoid='accounts_lbl_TotalAmt']";				xpath2 = xpath1.replace("changeAccountName", accountName);		xpath2 = xpath2.replace("changeContainerName", containerName);				we = d.findElement(By.xpath(xpath2));						return we;    	    }                /**	 * Overridden utility method to get error icon by passing Account Name as param.	 * 	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 * @return 	 * 				Error Icon WebElement	 */        public WebElement institutionViewGetErrorIcon(String accountName) {    	    	String baseErrorIconXpath,errorIconXpath = "";    	WebElement accBalance = null;    	    	baseErrorIconXpath = "(//div[ contains(.//span,'accountName') ]/ancestor::div[@autoid='accounts-container-level-low']//a[@autoid='accounts_icon_ErrorIcon'])[2]";    	    	errorIconXpath = baseErrorIconXpath.replace("accountName", accountName);    	    	accBalance = d.findElement(By.xpath(errorIconXpath));    			    	return accBalance;    	    }            /**	 * Overridden utility method to get all error icons by passing Account Name as param.	 * 	 * @param accountName	 *            Account name as shown in Accounts FinApp.	 * @return 	 * 				Error Icon List WebElement	 */        public List<WebElement> institutionViewGetErrorIcons() {    	    	String baseErrorIconXpath = "";    	List<WebElement> accBalance = null;    	    	baseErrorIconXpath = "//a[@autoid='accounts_icon_ErrorIcon']";    	    	accBalance = d.findElements(By.xpath(baseErrorIconXpath));    			    	return accBalance;    	    }            }