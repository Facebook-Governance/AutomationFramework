/*** Copyright (c) 2018 Yodlee Inc. All Rights Reserved.** This software is the confidential and proprietary information of* Yodlee, Inc. Use is subject to license terms.** @author Renuka K*/package com.omni.pfm.pages.TransactionEnhancement1;import java.util.LinkedList;import java.util.List;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.WebDriverWait;import com.omni.pfm.utility.PropsUtil;import com.omni.pfm.utility.SeleniumUtil;public class Add_Manual_Transaction1_Loc {	static WebDriver d;	public static String pageName="DashBoard";	public static String frameName=null;	public Add_Manual_Transaction1_Loc(WebDriver d) {		this.d = d;	}	/*private final String addTransactiontxt = "//a[@id='addManualTransactionButton']/span";	@FindBy(how = How.XPATH, using = addTransactiontxt)*/	public WebElement addTransactionHeader = SeleniumUtil.getWebElement(d, "addTransactiontxt", pageName, frameName);	public WebElement addTransactionHeader()	{		SeleniumUtil.fluentWait(d);		if (PropsUtil.getEnvPropertyValue("MOBILEORWEB").equalsIgnoreCase("WEB"))		{			return addTransactionHeader;		}		else		{			d.findElement(By.id("more-button")).click();			SeleniumUtil.fluentWait(d);			return d.findElement(By.xpath("//a[@id='menu-addManualTransactionButton']"));		}	}	/*private final String addTransactiontitle = "//h3[@id='modalname']";	@FindBy(how = How.XPATH, using = addTransactiontitle)*/	public WebElement addTransactionTitle() {		return SeleniumUtil.getWebElement(d, "addTransactiontitle", pageName, frameName);	}	/*private final String accounttxt = "(//div[@class='mtPopupContent']/div/div)[1]";	@FindBy(how = How.XPATH, using = accounttxt)*/	public WebElement accountText() {		return SeleniumUtil.getWebElement(d, "accounttxt", pageName, frameName);	}	/*private final String selectAccountbx = "mtTxnAccountSelected";	@FindBy(how = How.ID, using = selectAccountbx)*/	public WebElement selectAccountTextBox() {		return SeleniumUtil.getWebElement(d, "selectAccountbx", pageName, frameName);	}	/*private final String moredetailsbtn = "show-more-details";	@FindBy(how = How.ID, using = moredetailsbtn)*/	public WebElement moreDetailsButton() {		return SeleniumUtil.getWebElement(d, "moredetailsbtn", pageName, frameName);	}	/*private final String accountstype = "(//div[@id='accountsFilterContent']/div//ul/li/div/span)[10]";	@FindBy(how = How.XPATH, using = accountstype)*/	public WebElement accountsType() {		return SeleniumUtil.getWebElement(d, "accountstype", pageName, frameName);	}	/*private final String accountstypebx = "mtTxnAccountSelected";	@FindBy(how = How.ID, using = accountstypebx)*/	public WebElement accountTypeTextBox() {		return SeleniumUtil.getWebElement(d, "accountstypebx", pageName, frameName);	}	/*private final String withdrawcheckBox = "//label[@class='yodlee-radio-button-label-radio r_on']";	@FindBy(how = How.XPATH, using = withdrawcheckBox)*/	public WebElement withdrawCheckBox = SeleniumUtil.getWebElement(d, "withdrawcheckBox", pageName, frameName);	public WebElement withdrawCheckBox()	{		if (PropsUtil.getEnvPropertyValue("MOBILEORWEB").equalsIgnoreCase("WEB"))		{			return withdrawCheckBox;		}		else		{			return d.findElement(By.id("mtChooseAccountTypeDeposit"));		}	}	public List<WebElement> list() {		return d.findElements(By.xpath("//div[@id='tagCtr']/div"));	}	public List<WebElement> customTag() {		return d.findElements(By.xpath("//div[@id='tagCtr']/div"));	}	/*private final String depositcheckBox = "//div[@id='mtPopupContent']/div[2]/div[2]/div/div[1]/label";	@FindBy(how = How.XPATH, using = depositcheckBox)*/	public WebElement depositCheckBox =		SeleniumUtil.getWebElement(d, "depositcheckBox", pageName, frameName);		public WebElement depositCheckBox()	{		if (PropsUtil.getEnvPropertyValue("MOBILEORWEB").equalsIgnoreCase("WEB"))		{			return depositCheckBox;		}		else		{			return d.findElement(By.id("mtChooseAccountTypeWithdrawal"));		}	}	/*private final String investmentcheckBox = "//div[@id='mtChooseAccountTypeInvestmentParent']/label";	@FindBy(how = How.XPATH, using = investmentcheckBox)*/	public WebElement investmentCheckBox = SeleniumUtil.getWebElement(d, "investmentcheckBox", pageName, frameName);	public WebElement investmentCheckBox()	{		if (PropsUtil.getEnvPropertyValue("MOBILEORWEB").equalsIgnoreCase("WEB"))		{			return investmentCheckBox;		}		else		{			return d.findElement(By.id("mtChooseAccountTypeInvestment"));		}	}	/*private final String depositcheckBox1 = "//label[@class='yodlee-radio-button-label-radio r_on']";	@FindBy(how = How.XPATH, using = depositcheckBox1)*/	public WebElement depositCheckBox1() {		return SeleniumUtil.getWebElement(d, "depositcheckBox1", pageName, frameName);	}		/*private final String transatypelist = "//div[@id='mtTransactionTypeList']//ul/li//span[1]";	@FindBy(how = How.XPATH, using = transatypelist)*/	public List<WebElement> TransactionTypeList(){		return SeleniumUtil.getWebElements(d, "transatypelist", pageName, frameName);	}	/*private final String amtBox = "mtAmount";	@FindBy(how = How.ID, using = amtBox)*/	public WebElement amountTextBox() {		return SeleniumUtil.getWebElement(d, "amtBox", pageName, frameName);	}	/*private final String daterange = "mtDepostWithdrawalDate";	@FindBy(how = How.ID, using = daterange)*/	public WebElement dateRangeBox() {		return SeleniumUtil.getWebElement(d, "daterange", pageName, frameName);	}	/*private final String errormsg = "//div[@id='manualTransactionTypeWithdrawaldeposit']/div[1]/div[2]/div]";	@FindBy(how = How.XPATH, using = errormsg)*/	public WebElement errorMsg() {		return SeleniumUtil.getWebElement(d, "errormsg", pageName, frameName);	}	/*private final String calender = "//div[@id='mtDepostWithdrawalDateCnr']/div/div/div/div[2]/div[2]/div/div[2]/a[text()='29']";	@FindBy(how = How.XPATH, using = calender)*/	public WebElement calenderBox() {		return SeleniumUtil.getWebElement(d, "calender", pageName, frameName);	}	/*private final String dateerrormsg = "mtDepostWithdrawalDateError";	@FindBy(how = How.ID, using = dateerrormsg)*/	public WebElement dateErrorMsg() {		return SeleniumUtil.getWebElement(d, "dateerrormsg", pageName, frameName);	}	/*private final String postedlabel = "mtPostedLabel";	@FindBy(how = How.ID, using = postedlabel)*/	public WebElement postedLabel() {		return SeleniumUtil.getWebElement(d, "postedlabel", pageName, frameName);	}	/*private final String postedcheckbx = "mtPosted";	@FindBy(how = How.ID, using = postedcheckbx)*/	public WebElement postedCheckBox() {		return SeleniumUtil.getWebElement(d, "postedcheckbx", pageName, frameName);	}	/*private final String previousyearbtn = "prev-year";	@FindBy(how = How.ID, using = previousyearbtn)*/	public WebElement previousYearButton()	{		return SeleniumUtil.getWebElement(d, "previousyearbtn", pageName, frameName);	}	/*private final String previousmonthbtn = "prev-month";	@FindBy(how = How.ID, using = previousmonthbtn)*/	public WebElement previousMonthButton() {		return SeleniumUtil.getWebElement(d, "previousmonthbtn", pageName, frameName);	}	/*private final String previousdate = "//div[@id='mtDepostWithdrawalDateCnr']/div/div/div/div[2]/div[2]/div[3]/div[3]/a";	@FindBy(how = How.XPATH, using = previousdate)*/	public WebElement previousDate() {		return SeleniumUtil.getWebElement(d, "previousdate", pageName, frameName);	}	/*private final String recurstxt = "//div[@id='recursDiv']/div[1]";	@FindBy(how = How.XPATH, using = recurstxt)*/	public WebElement recursText() {		return SeleniumUtil.getWebElement(d, "recurstxt", pageName, frameName);	}	/*private final String descriptiontxt = "//div[@id='mtPopupContent']/div[1]/div[1]";	@FindBy(how = How.XPATH, using = descriptiontxt)*/	public WebElement DescriptionText() {		return SeleniumUtil.getWebElement(d, "descriptiontxt", pageName, frameName);	}	/*private final String descriptiontxtbx = "mtDepositDescription";	@FindBy(how = How.ID, using = descriptiontxtbx)*/	public WebElement DescriptionTextBox() {		return SeleniumUtil.getWebElement(d, "descriptiontxtbx", pageName, frameName);	}	/*private final String pastcalenderdt = "//div[@id='mtDepostWithdrawalDateCnr']/div/div/div/div[2]/div[2]/div[5]/div[7]/a";	@FindBy(how = How.XPATH, using = pastcalenderdt)*/	public WebElement pastCalenderDate() {		return SeleniumUtil.getWebElement(d, "pastcalenderdt", pageName, frameName);	}	/*private final String recursbox = "mtTxnRecursSelected";	@FindBy(how = How.ID, using = recursbox)*/	public WebElement recursDropDownBox() {		return SeleniumUtil.getWebElement(d, "recursbox", pageName, frameName);	}	/*private final String recursdropdown = "//div[@id='mtRecursList']/div[1]";	@FindBy(how = How.XPATH, using = recursdropdown)*/	public WebElement recursDropDown() {		return SeleniumUtil.getWebElement(d, "recursdropdown", pageName, frameName);	}	/*private final String weeklysublabel = "//span[contains(text(),'Weekly')]";	@FindBy(how = How.XPATH, using = weeklysublabel)*/	public WebElement weeklySubLabel() {		return SeleniumUtil.getWebElement(d, "weeklysublabel", pageName, frameName);	}	/*private final String enddatebox = "mtEndDate";	@FindBy(how = How.ID, using = enddatebox)*/	public WebElement endDateDropDown() {		return SeleniumUtil.getWebElement(d, "enddatebox", pageName, frameName);	}	/*private final String currencydropdownbx = "mtTxnCurrencySelected";	@FindBy(how = How.ID, using = currencydropdownbx)*/	public WebElement currencyDropDownBox() {		return SeleniumUtil.getWebElement(d, "currencydropdownbx", pageName, frameName);	}	/*private final String currencydropdown = "//div[@id='mtCurrencyList']/span";	@FindBy(how = How.XPATH, using = currencydropdown)*/	public WebElement currencyDropDown() {		return SeleniumUtil.getWebElement(d, "currencydropdown", pageName, frameName);	}	/*private final String errordatecalender = "//div[@id='mtEndDateCnr']/div/div/div/div[2]/div[2]/div/div[4]//a[text()='2']";	@FindBy(how = How.XPATH, using = errordatecalender)*/	public WebElement errorDateCalender() {		return SeleniumUtil.getWebElement(d, "", pageName, frameName);	}	/*private final String errorcalendermsg = "mtEndDateError";	@FindBy(how = How.ID, using = errorcalendermsg)*/	public WebElement errorCalenderMsg() {		return SeleniumUtil.getWebElement(d, "errorcalendermsg", pageName, frameName);	}	/*private final String enddatecalender = "//div[@id='mtEndDateCnr']/div/div/div/div[2]/div[2]/div[4]/div[6]/a[text()='25']";	@FindBy(how = How.XPATH, using = enddatecalender)*/	public WebElement endDateCalender() {		return SeleniumUtil.getWebElement(d, "enddatecalender", pageName, frameName);	}	/*private final String tagtxt = "//div[@id='more-details-withdrawl']/div[1]/div[1]";	@FindBy(how = How.XPATH, using = tagtxt)*/	public WebElement tagText() {		return SeleniumUtil.getWebElement(d, "tagtxt", pageName, frameName);	}	/*private final String tagtxtbx = "addTagsInput";	@FindBy(how = How.ID, using = tagtxtbx)*/	public WebElement tagTextBox() {		return SeleniumUtil.getWebElement(d, "tagtxtbx", pageName, frameName);	}	/*private final String addtag = "//a[contains(@class,'addTagButton')]";	@FindBy(how = How.XPATH, using = addtag)*/	public WebElement addTag() {		return SeleniumUtil.getWebElement(d, "addtag", pageName, frameName);	}	/*private final String errorMsgTag = "mtagError";	@FindBy(how = How.ID, using = errorMsgTag)*/	public WebElement ErrorMsgTag() {		return SeleniumUtil.getWebElement(d, "errorMsgTag", pageName, frameName);	}	/*private final String  errorMsgTagSpecialChar= "mtagSymbolsError";	@FindBy(how = How.ID, using = errorMsgTagSpecialChar)*/	public WebElement ErrorMsgTagSpecialChar() {		return SeleniumUtil.getWebElement(d, "errorMsgTagSpecialChar", pageName, frameName);	}	/*private final String businesstag = "//ul[@class='top']//li[contains(@id,'Business')]/div";	@FindBy(how = How.XPATH, using = businesstag)*/	public WebElement businessTag() {		return SeleniumUtil.getWebElement(d, "businesstag", pageName, frameName);	}	/*private final String businesstagbx = "//div[contains(@title,'Business')]";	@FindBy(how = How.XPATH, using = businesstagbx)*/	public WebElement businessTagBox() {		return SeleniumUtil.getWebElement(d, "businesstagbx", pageName, frameName);	}	/*private final String vacationtag = "//ul[@class='top']//li[contains(@id,'Vacation')]/div";	@FindBy(how = How.XPATH, using = vacationtag)*/	public WebElement vacationTag() {		return SeleniumUtil.getWebElement(d, "vacationtag", pageName, frameName);	}	/*private final String vacationtagbx = "//div[contains(@title,'Vacation')]";	@FindBy(how = How.XPATH, using = vacationtagbx)*/	public WebElement vacationTagBox() {		return SeleniumUtil.getWebElement(d, "vacationtagbx", pageName, frameName);	}	/*private final String traveltag = "//ul[@class='top']//li[contains(@id,'Travel')]/div";	@FindBy(how = How.XPATH, using = traveltag)*/	public WebElement TravelTag() {		return SeleniumUtil.getWebElement(d, "traveltag", pageName, frameName);	}	/*private final String personaltag = "//div[contains(@title,'Personal')]";	@FindBy(how = How.XPATH, using = personaltag)*/	public WebElement personalTag() {		return SeleniumUtil.getWebElement(d, "personaltag", pageName, frameName);	}	/*private final String customtag = "//div[@id='tagCtr']//div[3]";	@FindBy(how = How.XPATH, using = customtag)*/	public WebElement customTag1() {		return SeleniumUtil.getWebElement(d, "customtag", pageName, frameName);	}	// public void selectCategoryByNumber(int highLevelCategoryNum, int	// masterLevelCategoryNum) {	//	// Util.fluentWait(2500);	//	// WebElement element =	// webDriver.findElement(By.xpath("//div[@class='multisection-dropdown']/ul//ul/li["+highLevelCategoryNum+"]//li["+masterLevelCategoryNum+"]//span[1]"));	//	// JavascriptExecutor executor=(JavascriptExecutor)webDriver;	//	// executor.executeScript("arguments[0].click();", element);	//	//	//	// }	//	//	/*private final String closeicon = "(//a[@class='deleteTagClose deleteTag']/i)[1]";	@FindBy(how = How.XPATH, using = closeicon)*/	public WebElement closeIcon() {		return SeleniumUtil.getWebElement(d, "closeicon", pageName, frameName);	}	/*private final String notetxt = "//div[@id='more-details-withdrawl']/div[2]/div[1]";	@FindBy(how = How.XPATH, using = notetxt)*/	public WebElement noteText() {		return SeleniumUtil.getWebElement(d, "notetxt", pageName, frameName);	}	/*private final String notetxtbx = "mtDepositNote";	@FindBy(how = How.ID, using = notetxtbx)*/	public WebElement noteTextBox() {		return SeleniumUtil.getWebElement(d, "notetxtbx", pageName, frameName);	}	/*private final String checknumbertxt = "//div[@id='more-details-withdrawl']/div[3]/div[1]";	@FindBy(how = How.XPATH, using = checknumbertxt)*/	public WebElement checknumberText() {		return SeleniumUtil.getWebElement(d, "checknumbertxt", pageName, frameName);	}	/*private final String buytxt = "//li[@id='buy']/div";	@FindBy(how = How.XPATH, using = buytxt)*/	public WebElement buyText() {		return SeleniumUtil.getWebElement(d, "buytxt", pageName, frameName);	}	/*private final String transactiontypetxtbx = "mtTxnTypeParent";	@FindBy(how = How.ID, using = transactiontypetxtbx)*/	public WebElement transactionTypeTextBox() {		return SeleniumUtil.getWebElement(d, "transactiontypetxtbx", pageName, frameName);	}	/*private final String selltxt = "//li[@id='sell']/div";	@FindBy(how = How.XPATH, using = selltxt)*/	public WebElement sellText() {		return SeleniumUtil.getWebElement(d, "selltxt", pageName, frameName);	}	/*private final String holdingtypetxtbx = "mtTxnHoldingTypeParent";	@FindBy(how = How.ID, using = holdingtypetxtbx)*/	public WebElement holdingTypeTextBox() {		return SeleniumUtil.getWebElement(d, "holdingtypetxtbx", pageName, frameName);	}	/*private final String bondholdingtype = "//div[@class='multisection-dropdown']/ul/li/div[@data-id='bond']";	@FindBy(how = How.XPATH, using = bondholdingtype)*/	public WebElement bondHoldingType() {		return SeleniumUtil.getWebElement(d, "bondholdingtype", pageName, frameName);	}	/*private final String CDholdingtype = "//div[@class='multisection-dropdown']/ul/li/div[@data-id='CD']";	@FindBy(how = How.XPATH, using = CDholdingtype)*/	public WebElement CDHoldingType() {		return SeleniumUtil.getWebElement(d, "CDholdingtype", pageName, frameName);	}	/*private final String addtransactionbtn = "addTransactionButton";	@FindBy(how = How.ID, using = addtransactionbtn)*/	public WebElement addTransactionButton() {		return SeleniumUtil.getWebElement(d, "addtransactionbtn", pageName, frameName);	}	/*private final String closeicn = "//a[@title='Close']";	@FindBy(how = How.XPATH, using = closeicn)*/	public WebElement manualTransactionPopUpcloseIcon() {		return SeleniumUtil.getWebElement(d, "closeicn", pageName, frameName);	}	/*private final String symboltickertxt = "//div[@id='manualTransactionTypeInvestment']/div[1]/div[1]";	@FindBy(how = How.XPATH, using = symboltickertxt)*/	public WebElement symbolTickerText() {		return SeleniumUtil.getWebElement(d, "symboltickertxt", pageName, frameName);	}	/*private final String symboltickertxtbx = "mtInvestmentTicker";	@FindBy(how = How.ID, using = symboltickertxtbx)*/	public WebElement symbolTickerTextBox() {		return SeleniumUtil.getWebElement(d, "symboltickertxtbx", pageName, frameName);	}	/*private final String CSUIPtxt = "//div[@id='manualTransactionTypeInvestment']/div[2]/div[1]";	@FindBy(how = How.XPATH, using = CSUIPtxt)*/	public WebElement CSUIPText() {		return SeleniumUtil.getWebElement(d, "CSUIPtxt", pageName, frameName);	}	/*private final String CSUIPtxtbx = "mtInvestmentCsuip";	@FindBy(how = How.ID, using = CSUIPtxtbx)*/	public WebElement CSUIPTextBox() {		return SeleniumUtil.getWebElement(d, "CSUIPtxtbx", pageName, frameName);	}	/*private final String accname = "//div[@id='mtAccountList']/div[contains(@class,'multisection-dropdown')]/ul/li/ul/li[1]//li[1]/div";	@FindBy(how = How.XPATH, using = accname)*/	public WebElement selectAccountName() {		return SeleniumUtil.getWebElement(d, "accname", pageName, frameName);	}	public void selectCategoryByNumber(int highLevelCategoryNum, int masterLevelCategoryNum) {		WebElement element = d.findElement(By.xpath("//div[@id='mtCategoryList']//li//ul/li["				+ highLevelCategoryNum + "]//ul/li[" + masterLevelCategoryNum + "]//span"));		element.click();	}	public void selectCurrencyByNumber(int currencyName) {		WebElement element = d				.findElement(By.xpath("//div[@id='mtCurrencyList']/div/ul/li[" + currencyName + "]/div/span"));		element.click();	}	public void selectTransactionTypeByNumber(int TransactionNum) {		WebElement element = d				.findElement(By.xpath("//div[@id='mtTransactionTypeList']/div/ul/li[" + TransactionNum + "]/div/span"));		element.click();	}	/*private final String allcategoriesdropdownbx = "mtTxnCategorySelected";	@FindBy(how = How.ID, using = allcategoriesdropdownbx)*/	public WebElement allCategoriesDropDownBox() {		return SeleniumUtil.getWebElement(d, "allcategoriesdropdownbx", pageName, frameName);	}	/*private final String transactiontypedropdownbx = "mtTxnTransactionTypeSelected";	@FindBy(how = How.ID, using = transactiontypedropdownbx)*/	public WebElement transactionTypeDropDownBox() {		return SeleniumUtil.getWebElement(d, "transactiontypedropdownbx", pageName, frameName);	}	/*private final String transactiontypedropdown = "//div[@id='mtTransactionTypeList']/span";	@FindBy(how = How.XPATH, using = transactiontypedropdown)*/	public WebElement transactionTypeDropDown() {		return SeleniumUtil.getWebElement(d, "transactiontypedropdown", pageName, frameName);	}	/*private final String lotholdingtypetxt = "//div[@id='manualTransactionTypeInvestment']/div[8]/div[1]";	@FindBy(how = How.XPATH, using = lotholdingtypetxt)*/	public WebElement lotHoldingTypeText() {		return SeleniumUtil.getWebElement(d, "lotholdingtypetxt", pageName, frameName);	}	/*private final String accountsdropdown = "//div[@id='mtAccountList']/div[1]";	@FindBy(how = How.XPATH, using = accountsdropdown)*/	public WebElement accountsDropDown() {		return SeleniumUtil.getWebElement(d, "accountsdropdown", pageName, frameName);	}	/*private final String transactiontypetxt = "(//div[contains(@class,'mtLabelMarginBottom')])[2]";	@FindBy(how = How.XPATH, using = transactiontypetxt)*/	public WebElement transactionTypeText() {		return SeleniumUtil.getWebElement(d, "transactiontypetxt", pageName, frameName);	}	/*private final String currencytxt = "(//div[@id='currency-dropdown-row'])[1]";	@FindBy(how = How.XPATH, using = currencytxt)*/	public WebElement currencyText() {		return SeleniumUtil.getWebElement(d, "currencytxt", pageName, frameName);	}	/*private final String categorydropdown = "//div[@id='mtCategoryList']/span";	@FindBy(how = How.XPATH, using = categorydropdown)*/	public WebElement categoryDropDown() {		return SeleniumUtil.getWebElement(d, "categorydropdown", pageName, frameName);	}	/*private final String investmentypedropdown = "//div[@id='mtInvestmentTypeList']/div[2]";		@FindBy(how = How.XPATH, using = investmentypedropdown)*/	public WebElement investmentypeDropDown() {		return SeleniumUtil.getWebElement(d, "investmentypedropdown", pageName, frameName);	}	/*private final String showMoreDetail = "//a[@id='show-more-details']";	@FindBy(how = How.XPATH, using = showMoreDetail)*/	public WebElement showMoreDetails() {		return SeleniumUtil.getWebElement(d, "showMoreDetail", pageName, frameName);	}	/*private final String holdingType = "mtTxnLotHandlingTypeSelected";	@FindBy(how = How.ID, using = holdingType)*/	public WebElement holdingTypes() {		return SeleniumUtil.getWebElement(d, "holdingType", pageName, frameName);	}	/*private final String svgenddate = "svgenddate";	@FindBy(how = How.ID, using = svgenddate)*/	public WebElement svgenddates() {		return SeleniumUtil.getWebElement(d, "svgenddate", pageName, frameName);	}	public static LinkedList<String> verifyCurr() {		By elementObj = By.xpath("//div[@id='mtCurrencyList']//li/div/span[contains(@class,'ellipsis name')]");		try {			new WebDriverWait(d, 20).until(ExpectedConditions.presenceOfElementLocated(elementObj));		} catch (Exception el) {			System.out.print("\n List element is not visible");		}		List<WebElement> el = d.findElements(elementObj);		LinkedList<String> dropdownValue = new LinkedList<String>();		if (el != null) {			for (int i = 0; i < el.size(); i++) {				dropdownValue.add(el.get(i).getText().replaceAll("\n", "").trim());			}		} else {			System.out.print("Element is not found");			dropdownValue = null;		}		return dropdownValue;	}	public boolean compareOrder(LinkedList<String> actual, LinkedList<String> expected) {		boolean status = true;		if (actual == null || expected == null) {			// list is empty		} else if (actual.size() == expected.size()) {			for (int i = 0; i < actual.size(); i++) {				if (!(actual.get(i).trim().equals(expected.get(i).trim()))) {					System.out.print("\n the expected value [" + expected.get(i).trim() + "] and actual value=["							+ actual.get(i).trim() + "] , elements are not in Alphabetical order.");					status = false;				} else {					System.out.print("\n the expected value [" + expected.get(i).trim() + "] and actual value=["							+ actual.get(i).trim() + "] , elements are in Alphabetical order.");					status = true;				}			}		}		return status;	}}