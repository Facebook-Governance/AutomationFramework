<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="15" passed="15" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-03-02T07:23:59Z" name="ReqResAPISuite" finished-at="2021-03-02T07:24:11Z" duration-ms="11704">
    <groups>
    </groups>
    <test started-at="2021-03-02T07:23:59Z" name="Register User" finished-at="2021-03-02T07:24:05Z" duration-ms="6214">
      <class name="com.RegisterUser.RegisterUser">
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:com.RegisterUser.RegisterUser@5d066c7d]" started-at="2021-03-02T07:23:59Z" name="beforeTest" finished-at="2021-03-02T07:24:00Z" duration-ms="1050" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="registerUserSuccessfully()[pri:0, instance:com.RegisterUser.RegisterUser@5d066c7d]" started-at="2021-03-02T07:24:00Z" name="registerUserSuccessfully" description="Verify successful User Registration" finished-at="2021-03-02T07:24:02Z" duration-ms="1941" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUserSuccessfully -->
        <test-method signature="registerUserUnSuccessfully_PasswordNotProvided()[pri:1, instance:com.RegisterUser.RegisterUser@5d066c7d]" started-at="2021-03-02T07:24:03Z" name="registerUserUnSuccessfully_PasswordNotProvided" description="Verify Un-successful User Registration when password is not provided" finished-at="2021-03-02T07:24:04Z" duration-ms="1203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUserUnSuccessfully_PasswordNotProvided -->
        <test-method signature="registerUserUnSuccessfully_EmailNotProvided()[pri:2, instance:com.RegisterUser.RegisterUser@5d066c7d]" started-at="2021-03-02T07:24:04Z" name="registerUserUnSuccessfully_EmailNotProvided" description="Verify Un-successful User Registration when email is not provided" finished-at="2021-03-02T07:24:04Z" duration-ms="424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUserUnSuccessfully_EmailNotProvided -->
        <test-method signature="registerUserUnSuccessfully_WrongBody()[pri:3, instance:com.RegisterUser.RegisterUser@5d066c7d]" started-at="2021-03-02T07:24:05Z" name="registerUserUnSuccessfully_WrongBody" description="Verify User Registration when wrong body is provided" finished-at="2021-03-02T07:24:05Z" duration-ms="445" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUserUnSuccessfully_WrongBody -->
      </class> <!-- com.RegisterUser.RegisterUser -->
    </test> <!-- Register User -->
    <test started-at="2021-03-02T07:24:05Z" name="Create User" finished-at="2021-03-02T07:24:06Z" duration-ms="816">
      <class name="com.CreateUser.CreateUser">
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:com.CreateUser.CreateUser@29526c05]" started-at="2021-03-02T07:24:05Z" name="beforeTest" finished-at="2021-03-02T07:24:05Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="createUserSuccessfully()[pri:0, instance:com.CreateUser.CreateUser@29526c05]" started-at="2021-03-02T07:24:05Z" name="createUserSuccessfully" description="Verify Create User Flow" finished-at="2021-03-02T07:24:05Z" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserSuccessfully -->
        <test-method signature="createUserUnSuccessfully_BodyNotProvided()[pri:1, instance:com.CreateUser.CreateUser@29526c05]" started-at="2021-03-02T07:24:06Z" name="createUserUnSuccessfully_BodyNotProvided" description="Verify Un-successful create user flow when correct body is not provided" finished-at="2021-03-02T07:24:06Z" duration-ms="232" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserUnSuccessfully_BodyNotProvided -->
      </class> <!-- com.CreateUser.CreateUser -->
    </test> <!-- Create User -->
    <test started-at="2021-03-02T07:24:06Z" name="List User" finished-at="2021-03-02T07:24:07Z" duration-ms="1446">
      <class name="com.ListUsers.ListUsers">
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:com.ListUsers.ListUsers@64a40280]" started-at="2021-03-02T07:24:06Z" name="beforeTest" finished-at="2021-03-02T07:24:06Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="listSingleUserInformation()[pri:0, instance:com.ListUsers.ListUsers@64a40280]" started-at="2021-03-02T07:24:06Z" name="listSingleUserInformation" description="Verify get information about Single List User" finished-at="2021-03-02T07:24:06Z" duration-ms="101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listSingleUserInformation -->
        <test-method signature="listAllUsersInformaitonPageOne()[pri:1, instance:com.ListUsers.ListUsers@64a40280]" started-at="2021-03-02T07:24:06Z" name="listAllUsersInformaitonPageOne" description="Verify get information about Single List all users for different Pages, :: here Page 1" finished-at="2021-03-02T07:24:07Z" duration-ms="404" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listAllUsersInformaitonPageOne -->
        <test-method signature="listAllUsersInformaitonPageTwo()[pri:2, instance:com.ListUsers.ListUsers@64a40280]" started-at="2021-03-02T07:24:07Z" name="listAllUsersInformaitonPageTwo" description="Verify get information about Single List all users for different Pages, :: here Page 1" finished-at="2021-03-02T07:24:07Z" duration-ms="417" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listAllUsersInformaitonPageTwo -->
      </class> <!-- com.ListUsers.ListUsers -->
    </test> <!-- List User -->
    <test started-at="2021-03-02T07:24:07Z" name="Update User" finished-at="2021-03-02T07:24:09Z" duration-ms="2007">
      <class name="com.Update.UpdateUser">
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:com.Update.UpdateUser@7a1234bf]" started-at="2021-03-02T07:24:07Z" name="beforeTest" finished-at="2021-03-02T07:24:07Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="updateUser()[pri:0, instance:com.Update.UpdateUser@7a1234bf]" started-at="2021-03-02T07:24:07Z" name="updateUser" description="Verify Create User Flow" finished-at="2021-03-02T07:24:08Z" duration-ms="393" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateUser -->
        <test-method signature="updateUserAndValidateUdpatedTime()[pri:1, instance:com.Update.UpdateUser@7a1234bf]" started-at="2021-03-02T07:24:08Z" name="updateUserAndValidateUdpatedTime" description="Verify Create User Flow" finished-at="2021-03-02T07:24:08Z" duration-ms="401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateUserAndValidateUdpatedTime -->
        <test-method signature="updateUserNegativeUseCase()[pri:2, instance:com.Update.UpdateUser@7a1234bf]" started-at="2021-03-02T07:24:09Z" name="updateUserNegativeUseCase" description="Verify negative use case when body of the API is wrong" finished-at="2021-03-02T07:24:09Z" duration-ms="369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateUserNegativeUseCase -->
        <test-method signature="updateOnlyJobInUserInfo()[pri:3, instance:com.Update.UpdateUser@7a1234bf]" started-at="2021-03-02T07:24:09Z" name="updateOnlyJobInUserInfo" description="Verify update user with only job update" finished-at="2021-03-02T07:24:09Z" duration-ms="223" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateOnlyJobInUserInfo -->
      </class> <!-- com.Update.UpdateUser -->
    </test> <!-- Update User -->
    <test started-at="2021-03-02T07:24:09Z" name="Delete User" finished-at="2021-03-02T07:24:11Z" duration-ms="1126">
      <class name="com.DeleteUser.DeleteUser">
        <test-method is-config="true" signature="beforeSuite(java.lang.String)[pri:0, instance:com.DeleteUser.DeleteUser@39a2bb97]" started-at="2021-03-02T07:23:59Z" name="beforeSuite" finished-at="2021-03-02T07:23:59Z" duration-ms="18" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[reqres]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:com.DeleteUser.DeleteUser@39a2bb97]" started-at="2021-03-02T07:24:09Z" name="beforeTest" finished-at="2021-03-02T07:24:09Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="deleteUser1()[pri:0, instance:com.DeleteUser.DeleteUser@39a2bb97]" started-at="2021-03-02T07:24:09Z" name="deleteUser1" description="Verify Delete User Flow" finished-at="2021-03-02T07:24:10Z" duration-ms="388" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteUser1 -->
        <test-method signature="deleteUser2()[pri:1, instance:com.DeleteUser.DeleteUser@39a2bb97]" started-at="2021-03-02T07:24:10Z" name="deleteUser2" description="Verify Delete User Flow" finished-at="2021-03-02T07:24:10Z" duration-ms="369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteUser2 -->
      </class> <!-- com.DeleteUser.DeleteUser -->
    </test> <!-- Delete User -->
  </suite> <!-- ReqResAPISuite -->
</testng-results>
