/*** Copyright (c) 2018 Yodlee Inc. All Rights Reserved.** This software is the confidential and proprietary information of* Yodlee, Inc. Use is subject to license terms.** @author Rajeev Anantharaman Iyer*/package com.yodlee.customizationtool.listeners;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.yodlee.customizationtool.constants.Constants;import org.apache.commons.io.FileUtils;import org.openqa.selenium.OutputType;import org.openqa.selenium.TakesScreenshot;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.testng.*;import org.testng.annotations.Test;import org.testng.xml.XMLParser;import org.testng.xml.XmlClass;import org.testng.xml.XmlTest;import java.io.File;import java.io.IOException;import java.lang.reflect.Method;import java.util.*;import java.util.concurrent.TimeUnit;import static com.yodlee.customizationtool.basetest.BaseTest.webdriver;public class CustomListener extends TestListenerAdapter implements ISuiteListener {    private int totalTests;    private static final Logger logger = LoggerFactory.getLogger(CustomListener.class);    private String takeScreenShot(ITestResult result) {        String fileName = Constants.SCREENSHOT_DIR + File.separator                + "Thread" + Thread.currentThread().getId()                + File.separator + System.currentTimeMillis() + ".png";        String failedScreenShotLoc  = Constants.FAILED_SCREENSHOT_LOC                + File.separator + "Thread" + Thread.currentThread().getId()                + File.separator + System.currentTimeMillis() + ".png";        File destinationFile = new File(fileName);        //AppiumDriver <?> driver = TestBase.getDriver();        TakesScreenshot scrShot = ((TakesScreenshot) webdriver);        File sourceFile = scrShot.getScreenshotAs(OutputType.FILE);        try {            FileUtils.copyFile(sourceFile, destinationFile);        } catch (IOException e) {            e.printStackTrace();            failedScreenShotLoc  = "Failed to take screenshot";        }        return failedScreenShotLoc;    }    @Override    public void onTestStart(ITestResult tr) {        logger.info("=============================================================================");        logger.info("STARTED - " + tr.getTestClass().getName() + "##" + tr.getName()                + " By Thread with name as ##" + Thread.currentThread().getName());        logger.info("==============================================================================");    }    @Override    public void onTestSuccess(ITestResult tr) {        logger.info("==============================================================================");        logger.info("PASSED - " + tr.getTestClass().getName() + "#" + tr.getName());        logger.info("==============================================================================");    }    @Override    public void onTestFailure(ITestResult result) {        String failedSnapshot = null;        synchronized (this) {            logger.info("===========================================================================");            logger.info("FAILED - " + result.getTestClass().getName() + "##" + result.getName());            logger.info("===========================================================================");            logger.info("===========================================================================");            logger.info("FAILURE REASON :::" + result.getThrowable().getMessage());            logger.info("===========================================================================");            failedSnapshot =  takeScreenShot(result);        }    }    @Override    public void onTestSkipped(ITestResult tr) {        synchronized (this) {            logger.info("===========================================================================");            logger.info("SKIPPED - " + tr.getTestClass().getName() + "#" + tr.getName()                    + " SKIPPED REASON :::" + tr.getThrowable());            logger.info("===========================================================================");        }        //reportCounter(tr,"NA");    }    @Override    public void onStart(ITestContext context) {    }    @Override    public void onFinish(ITestContext context) {    }    public String getTime(long milliSeconds) {        String hms = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(milliSeconds),                TimeUnit.MILLISECONDS.toMinutes(milliSeconds)                        - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(milliSeconds)),                TimeUnit.MILLISECONDS.toSeconds(milliSeconds)                        - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliSeconds)));        return hms;    }   /* private String getTestCaseName(ITestResult tr) {        return tr.getMethod().getTestClass().getName() + "." + tr.getName() + "#" + getMethodParametes(tr);    }*/    /*private String getMethodParametes(ITestResult tr) {        String[] params = Arrays.stream(tr.getParameters()).map(Object::toString).toArray(String[]::new);        return params.length == 0 ? "" : String.join(",", params);    }*/       public void onStart(ISuite suite) {        List <XmlTest> tests = suite.getXmlSuite().getTests();        for (XmlTest e:tests) {            List<XmlClass> testClasses = e.getClasses();            for (XmlClass el:testClasses  ) {                for(Method m : el.getSupportClass().getMethods()){                    Test annotation = m.getAnnotation(Test.class);                    if (annotation != null && annotation.enabled())                        totalTests = totalTests + 1;                }            }        }        /*tests.stream().forEach(t -> t.getClasses().forEach(t1 -> {            for (Method m : t1.getSupportClass().getMethods()) {                Test annotation = m.getAnnotation(Test.class);                if (annotation != null && annotation.enabled())                    totalTests = totalTests + 1;            }        }));*/        logger.info("Approximate tests to run ~ " + totalTests);    }      public void onFinish(ISuite suite) {    }}